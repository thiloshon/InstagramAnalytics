k[order(abs(k$actual)),]
qplot(y = insta.data.raw$likes,
x = insta.data.raw$weekdays,
color = insta.data.raw$userName)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
instagramData[instagramData$followers==214,]$userName <- "janeEyre"
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
instagramData$weekdays <- factor(instagramData$weekdays, levels = instagramData$weekdays)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
instagramData$weekdays <- insta.data.raw$weekdays
str(instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
instagramData$weekdays <- factor(instagramData$weekdays, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + geom_bar()
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + geom_bar(instagramData$weekdays)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + geom_bar(aes(instagramData$weekdays))
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + geom_bar(aes(x = instagramData$weekdays, y = instagramData$likes))
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users")
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$usersAbove0
)
require(anytime)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$usersAbove0
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName
)
qplot(
y = insta.data.raw$likes,
x = insta.data.raw$filter,
color = insta.data.raw$userName
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$commentsCount
)
qplot(y = insta.data.raw$likes,
x = insta.data.raw$userName,
color = insta.data.raw$userName, geom = "boxplot",
fill = insta.data.raw$userName) + labs(title = "Likes vs Users", x = "Users", y = "Likes", colour = "Users")
shiny::runApp('InstaAnalysis')
instagramData[instagramData$followers==214,]$userName <- "thanu_naga"
instagramData[instagramData$followers==214,]$userName <- "jane_fakename"
insta.data.raw[insta.data.raw$followers==214,]$userName <- "jane_fakename"
names(insta.data.raw)
names(instagramData)
names(cleanedInstaData)
save(write.csv(instagramData, file = "instagramData.csv"))
write.csv(instagramData, file = "instagramData.csv")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
instagramData$userName
insta.data.raw[insta.data.raw$followers==214,]$userName <- "Paasamalar Padmini"
instagramData[instagramData$followers==214,]$userName <- "Paasamalar Padmini"
instagramData[instagramData$followers==214,]$userName <- "Paasamalar_Padmini"
runApp('InstaAnalysis')
write.csv(instagramData, file = "Instagram Analytics/instagramData.csv")
write.csv(instagramData, file = "Instagram Analytics\instagramData.csv")
write.csv(instagramData, file = "Instagram Analytics/instagramData.csv")
write.csv(instagramData, file = "instagramData.csv")
write.csv(instagramData, file = "InstaAnalysis/instagramData.csv")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
instagramData[instagramData$followers==214,]$userName <- "Sona93"
write.csv(instagramData, file = "InstaAnalysis/instagramData.csv")
runApp('InstaAnalysis')
instagramData[instagramData$followers==214,]$userName <- "sona93"
write.csv(instagramData, file = "InstaAnalysis/instagramData.csv")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_smooth()
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_smooth(aes(weekdays, likes), data = instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_density(aes(weekdays, likes), data = instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_line(aes(weekdays, likes), data = instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_line(aes(as.character(weekdays) , likes), data = instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users") + geom_line(aes(as.character(weekdays) , likes), data = instagramData)
qplot(y = instagramData$likes,
x = instagramData$weekdays,
color = instagramData$userName) + labs(title = "Likes vs Weekdays", x = "Weekdays", y = "Likes", colour = "Users")
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$usersAbove0
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$usersAbove0
) + labs(title = "Likes vs Friends Tagged", x = "Time", y = "Likes", colour = "Is anyone tagged in the image?")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName
)
runApp('InstaAnalysis')
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = instagramData$followers
)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = (instagramData$followers > 200)
)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = (instagramData$followers > 200)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Followers > 200?")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = (instagramData$followers > 200)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200")
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200")
qplot(
y = instagramData$likes,
x = instagramData$followers,
color = instagramData$userName
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200")
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200")
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth()
?geom_smooth
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth(se=F)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth(se=F, size = 2)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth(se=F, size = 0.5)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth(se=F, size = 0.3)
qplot(
y = instagramData$likes,
x = anydate(instagramData$createdTime),
color = as.factor(instagramData$followers)
) + labs(title = "Likes vs Followers Count", x = "Time", y = "Likes", colour = "Is Followers > 200") + geom_smooth(se=F, size = 0.8)
runApp('InstaAnalysis')
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName
)
qplot(
y = insta.data.raw$likes,
x = insta.data.raw$filter,
color = insta.data.raw$userName
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$commentsCount
)
qplot(y = insta.data.raw$likes,
x = insta.data.raw$userName,
color = insta.data.raw$userName, geom = "boxplot",
fill = insta.data.raw$userName) + labs(title = "Likes vs Users", x = "Users", y = "Likes", colour = "Users")
ggplot(data = insta.data.raw) + geom_boxplot(
aes(
y = insta.data.raw$likes,
x = insta.data.raw$userName,
fill = insta.data.raw$userName,
colour = insta.data.raw$userName
)
) + labs(
title = "Likes vs Users",
x = "Users",
y = "Likes",
fill = "Users",
colour = "Users"
)
runApp('InstaAnalysis')
shinyUI(fluidPage(
# Application title
titlePanel("Instagram Analytics"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dateRangeInput(
"bins",
"Date Range:",
start = "2014-09-02",
end   = "2017-05-01",
startview = "year"
),
checkboxGroupInput(
"users",
"Users:",
c(
"Thiloshon" = "thiloshon",
"Ruzaik" = "ruzaikjunaid",
"Sona" = "sona93",
"Supul" = "supulm",
"Shimak" = "shimak96",
"Ramzan" = "ramzandieze"
),
selected = c(
"thiloshon",
"ruzaikjunaid",
"sona93",
"supulm",
"shimak96",
"ramzandieze"
)
)
),
# Show a plot of the generated distribution
mainPanel(
h2("Welcome to Instagram Analytics"),
p(
"This is a simple Shiny Application. The data was gathered using Instagram API. The app shows few findings from the data gathered. The date and users can be tweaked as you wish."
),
h3("Regression Line with Loess"),
p("First let's see how likes vary with users and date"),
plotOutput("distPlot"),
p("The likes increase as the time increases. This makes sense since with increasing time, we will have increasing followers, with increasing followers we can expect more likes. But because of the limations of the Instagram API, i could only get followers count at the current date. I have assumed this is the same followers count throughout the time peroid which clearly is not the case."),
h3("Likes per Users"),
plotOutput("likesPerUserPlot"),
h3("Filters By Users"),
plotOutput("filterPlot"),
plotOutput("weekdayPlot"),
plotOutput("userTaggedPlot"),
plotOutput("likeVsFollowersPlot"),
plotOutput("followersPlot"),
h3("Entire Data"),
tableOutput("data")
)
)
))
instagramData[instagramData$userName=="shimak96"]$likes
instagramData[instagramData$userName=="shimak96",instagramData$likes]
instagramData[instagramData$userName=="shimak96",]
order(instagramData[instagramData$userName=="shimak96",]$likes)
instagramData[instagramData$userName=="shimak96",]$likes
j<-instagramData[instagramData$userName=="shimak96",]$likes
j[order(j)]
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
qplot(y = insta.data.raw$likes, x = insta.data.raw$commentsCount) + geom_smooth()
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName,
size = 3
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName,
size = 2
)
qplot(
y = insta.data.raw$likes,
x = anydate(insta.data.raw$createdTime),
color = insta.data.raw$userName,
size = 1
)
ggplot(data = insta.data.raw,
aes(y = insta.data.raw$likes, x = insta.data.raw$dateNew)) +
scale_x_date(
date_breaks = "06 month",
labels = date_format("%b-%Y"),
limits = as.Date(c('2014-09-02', '2017-05-01'), "%Y-%m-%d")
) + geom_smooth() + geom_point()
ggplot(data = insta.data.raw,
aes(y = insta.data.raw$likes, x = insta.data.raw$dateNew, size = 3)) +
scale_x_date(
date_breaks = "06 month",
labels = date_format("%b-%Y"),
limits = as.Date(c('2014-09-02', '2017-05-01'), "%Y-%m-%d")
) + geom_smooth() + geom_point()
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?tabPanel
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?tabPanel
runApp('InstaAnalysis')
runApp('InstaAnalysis')
names(cleanedInstaData)
runApp('InstaAnalysis')
?sidebarPanel
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
names(instagramData)
?dateInput
?selectInput
numericInput()
?numericInput
str(instagramData)
str(cleanedInstaData)
cleanedInstaData$filter
summary(cleanedInstaData$filter)
runApp('InstaAnalysis')
selectInput()
?selectInput
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?actionButton
runApp('InstaAnalysis')
runApp('InstaAnalysis')
names(cleanedInstaData)
cleanedInstaData$createdTime
cleanedInstaData$dateNew
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?actionButton
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?eventReactive
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
names(cleanedInstaData)
tr <- train(cleanedInstaData[,c(3,4,5,9,10,11,12,13,14)] , cleanedInstaData$likes)
tr
cleanedInstaData <- cleanedInstaData[,c(2,3,4,5,9,10,11,12,13,14)]
names(cleanedInstaData)
write.csv(cleanedInstaData, "cleanedData.csv")
read.csv("cleanedData.csv")
cleanedInstaData <- cleanedInstaData[-c(1)]
names(cleanedInstaData)
cleanedInstaData <- read.csv("cleanedData.csv")
cleanedInstaData <- cleanedInstaData[-c(1)]
names(cleanedInstaData)
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
str(cleanedInstaData)
runApp('InstaAnalysis')
runApp('InstaAnalysis')
cleanedInstaData$filter
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
cleanedInstaData$filter
runApp('InstaAnalysis')
str(cleanedInstaData)
as.logical(TRUE)
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
as.POSIXct.Date( "2017-05-10")
levels(instagramData$filter)
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
?outputOptions
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
cleanedInstaData
install.packages(c("Hmisc", "R6", "Rcpp", "RcppEigen", "assertthat", "curl", "formatR", "htmltools", "jsonlite", "markdown", "quantmod", "rmarkdown", "rsconnect", "stringi", "tibble", "tidyr", "zoo"))
install.packages(c("MASS", "Matrix", "boot", "cluster", "foreign", "lattice", "mgcv", "nlme", "rpart", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("Hmisc", "R6", "Rcpp", "RcppEigen", "assertthat", "curl", "formatR", "htmltools", "jsonlite", "markdown", "quantmod", "rmarkdown", "rsconnect", "stringi", "tibble", "tidyr", "zoo"))
install.packages(c("Hmisc", "R6", "Rcpp", "RcppEigen", "assertthat", "curl", "formatR", "htmltools", "jsonlite", "markdown", "quantmod", "rmarkdown", "rsconnect", "stringi", "tibble", "tidyr", "zoo"))
?warning
?warnings
rt
predictions
shiny::runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
knit('RMarkdownFile.rmd', quiet = TRUE)
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
train <- createDataPartition(cleanedInstaData$likes, p=0.75, list = F)
data.train <- cleanedInstaData[train,]
data.test <- cleanedInstaData[-train,]
randomForest <- train(data.train[,-c(1)] , data.train$likes)
cleanedInstaData <- read.csv("cleanedData.csv")
cleanedInstaData <- cleanedInstaData[-c(1)]
cleanedInstaData$dateNew <- as.POSIXct(cleanedInstaData$dateNew)
train <- createDataPartition(cleanedInstaData$likes, p=0.75, list = F)
data.train <- cleanedInstaData[train,]
data.test <- cleanedInstaData[-train,]
randomForest <- train(data.train[,-c(1)] , data.train$likes)
save(randomForest, "rf")
save(randomForest,file = "rf.RData")
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
runApp('InstaAnalysis')
